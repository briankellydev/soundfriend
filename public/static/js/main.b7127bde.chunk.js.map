{"version":3,"sources":["components/Player.tsx","components/SongOption.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Player","props","fileName","playing","volume","audioRef","createRef","useEffect","current","pause","load","play","ref","loop","src","type","SongOption","option","socket","openSocket","SONG_OPTIONS","sort","App","useState","updatePlaying","selectedSong","updateSelectedSong","totalUsers","updateTotalUsers","isAdmin","updateIsAdmin","updateVolume","stop","emit","changeVolume","val","on","totalUsersNumber","console","log","song","className","Card","CardHeader","title","subheader","CardContent","Paper","elevation","Button","variant","color","onClick","disabled","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7127bde.chunk.js","sourcesContent":["import React, { createRef, useEffect } from 'react';\n\nfunction Player(props: any) {\n    const {fileName, playing, volume} = props;\n    const audioRef: any = createRef();\n    useEffect(() => {\n        audioRef.current.pause();\n        audioRef.current.load();\n    }, [fileName, audioRef]);\n\n    useEffect(() => {\n        if (playing) {\n            audioRef.current.play();\n        } else {\n            audioRef.current.pause();\n        }\n        audioRef.current.volume = volume;\n    }, [playing, audioRef, volume]);\n\n    return (\n        <audio ref={audioRef} loop={true}>\n            <source src={fileName + '.mp3'} type=\"audio/mpeg\"></source>\n        </audio>\n    );\n}\nexport default Player;","import React from 'react';\nimport './SongOption.css';\n\nfunction SongOption(props: any) {\n    const {option} = props;\n    return (\n        <div>{option}</div>\n    )\n\n}\nexport default SongOption;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Player from './components/Player';\nimport { Button, Card, CardContent, CardHeader, Paper } from '@material-ui/core';\nimport SongOption from './components/SongOption';\nimport openSocket from \"socket.io-client\";\nconst prod = false;\nconst ENDPOINT = prod ? window.location.hostname : 'http://localhost:4200';\nconst socket = openSocket(ENDPOINT);\nconst SONG_OPTIONS = [\n  'creepingdanger',\n  'fabulous',\n  'fortuna',\n  'gameshow',\n  'jazz',\n  'monty',\n  'pathetique',\n  'quietreflection',\n  'rap',\n  'serenade',\n  'serene',\n  'spooky',\n  'valkyrie',\n  'psych'\n].sort();\n\nfunction App() {\n  const [playing, updatePlaying] = useState(false);\n  const [selectedSong, updateSelectedSong] = useState('');\n  const [totalUsers, updateTotalUsers] = useState(0);\n  const [isAdmin, updateIsAdmin] = useState(false);\n  const [volume, updateVolume] = useState(0.5);\n\n  useEffect(() => {\n    socket.on('userChange', (totalUsersNumber: number) => {\n      console.log(totalUsersNumber);\n      updateTotalUsers(totalUsersNumber);\n    });\n    socket.on('play', (song: string) => {\n      updateSelectedSong(song);\n      updatePlaying(true);\n    });\n    socket.on('stop', () => {\n      updatePlaying(false);\n    });\n    socket.on('isAdmin', (isAdmin: boolean) => {\n      updateIsAdmin(isAdmin);\n    });\n    socket.on('volume', (val: number) => {\n      updateVolume(val);\n    });\n  }, []);\n\n  function play() {\n    socket.emit('playSong', selectedSong);\n  }\n\n  function stop() {\n    socket.emit('stopSong');\n  }\n\n  function selectSong(song: string) {\n    if (isAdmin) {\n      stop();\n      updateSelectedSong(song);\n    }\n  }\n\n  function emergencyStop() {\n    updatePlaying(false);\n  }\n\n  function changeVolume(val: number) {\n    socket.emit('changeVolume', val);\n  }\n\n  return (\n    <div className=\"appWrapper\">\n      <Card>\n        <CardHeader title=\"DnD Jukebox\" subheader={'Total Users: ' + totalUsers}></CardHeader>\n        <CardContent>\n            {\n              isAdmin ? (\n                <div className=\"controls\">\n                  <Paper className=\"paper\" elevation={3}>\n                      <Button variant=\"outlined\" color=\"primary\" onClick={play} disabled={!selectedSong}>Play</Button>\n                      <Button variant=\"outlined\" color=\"secondary\" onClick={stop} disabled={!selectedSong}>Stop</Button>\n                      <Button variant=\"outlined\" color=\"default\" onClick={() => changeVolume(0.25)}>25%</Button>\n                      <Button variant=\"outlined\" color=\"default\" onClick={() => changeVolume(0.5)}>50%</Button>\n                      <Button variant=\"outlined\" color=\"default\" onClick={() => changeVolume(0.75)}>75%</Button>\n                      <Button variant=\"outlined\" color=\"default\" onClick={() => changeVolume(1.0)}>100%</Button>\n                  </Paper>\n                </div>\n              ) : (\n                <div className=\"controls\">\n                  <Paper className=\"paper\" elevation={3}>\n                      <Button variant=\"outlined\" color=\"secondary\" onClick={emergencyStop}>Emergency Stop</Button>\n                  </Paper>\n                </div>\n              )\n            }\n            <Paper className=\"paper\" elevation={3}>\n              {SONG_OPTIONS.map((option: string) => {\n                return (\n                  <div className={selectedSong === option ? 'option active' : 'option'} key={'option' + option} onClick={() => selectSong(option)}>\n                    <SongOption option={option}></SongOption>\n                  </div>\n                )\n              })}\n            </Paper>\n            <Player playing={playing} fileName={selectedSong} volume={volume}></Player>\n        </CardContent>\n      </Card>\n    </div>\n    \n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}